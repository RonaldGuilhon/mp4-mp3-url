#!/usr/bin/env python3
"""
Script para criar execut√°vel port√°vel do YouTube Downloader
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, description):
    """Executa um comando e mostra o progresso"""
    print(f"\n{description}...")
    print(f"Executando: {command}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"‚ùå Erro: {description}")
        print(f"Sa√≠da de erro: {result.stderr}")
        return False
    else:
        print(f"‚úÖ {description} conclu√≠do com sucesso")
        return True

def main():
    print("üöÄ Iniciando processo de build do execut√°vel port√°vel...")
    
    # Verificar se o Python est√° instalado
    try:
        python_version = subprocess.check_output([sys.executable, "--version"], text=True).strip()
        print(f"‚úÖ Python encontrado: {python_version}")
    except:
        print("‚ùå Python n√£o encontrado!")
        return False
    
    # Instalar depend√™ncias
    if not run_command(f"{sys.executable} -m pip install -r requirements.txt", "Instalando depend√™ncias"):
        return False
    
    # Criar diret√≥rio de build se n√£o existir
    build_dir = Path("build")
    dist_dir = Path("dist")
    
    # Limpar builds anteriores
    if build_dir.exists():
        shutil.rmtree(build_dir)
        print("üßπ Diret√≥rio build anterior removido")
    
    if dist_dir.exists():
        shutil.rmtree(dist_dir)
        print("üßπ Diret√≥rio dist anterior removido")
    
    # Comando PyInstaller para criar execut√°vel port√°vel
    pyinstaller_cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",                    # Criar um √∫nico arquivo execut√°vel
        "--windowed",                   # N√£o mostrar console (para GUI)
        "--name=YouTubeDownloader",     # Nome do execut√°vel
        "--icon=icon.ico",              # √çcone (se existir)
        "--add-data=bin;bin",           # Incluir pasta bin com ffmpeg
        "--hidden-import=tkinter",      # Importa√ß√£o expl√≠cita do tkinter
        "--hidden-import=yt_dlp",       # Importa√ß√£o expl√≠cita do yt-dlp
        "--clean",                      # Limpar cache antes do build
        "main.py"
    ]
    
    # Verificar se o √≠cone existe, se n√£o, remover da lista
    if not Path("icon.ico").exists():
        pyinstaller_cmd = [cmd for cmd in pyinstaller_cmd if not cmd.startswith("--icon")]
        print("‚ö†Ô∏è  √çcone n√£o encontrado, continuando sem √≠cone")
    
    # Executar PyInstaller
    pyinstaller_str = " ".join(pyinstaller_cmd)
    if not run_command(pyinstaller_str, "Criando execut√°vel com PyInstaller"):
        return False
    
    # Verificar se o execut√°vel foi criado
    exe_path = dist_dir / "YouTubeDownloader.exe"
    if exe_path.exists():
        print(f"\nüéâ Execut√°vel criado com sucesso!")
        print(f"üìÅ Localiza√ß√£o: {exe_path.absolute()}")
        print(f"üìä Tamanho: {exe_path.stat().st_size / (1024*1024):.1f} MB")
        
        # Criar pasta de distribui√ß√£o
        release_dir = Path("release")
        if release_dir.exists():
            shutil.rmtree(release_dir)
        release_dir.mkdir()
        
        # Copiar execut√°vel para pasta de release
        shutil.copy2(exe_path, release_dir / "YouTubeDownloader.exe")
        
        # Criar arquivo README para distribui√ß√£o
        readme_content = """# YouTube Downloader - Execut√°vel Port√°vel

## Como usar:
1. Execute o arquivo YouTubeDownloader.exe
2. Cole a URL do YouTube no campo apropriado
3. Escolha o formato (MP4 para v√≠deo ou MP3 para √°udio)
4. Selecione o diret√≥rio de destino
5. Clique em "Verificar URL" para ver os itens dispon√≠veis
6. Selecione os itens desejados e clique em "Baixar"

## Caracter√≠sticas:
- ‚úÖ Totalmente port√°vel (n√£o requer instala√ß√£o)
- ‚úÖ Suporte a v√≠deos individuais e playlists
- ‚úÖ Download em MP4 (v√≠deo) e MP3 (√°udio)
- ‚úÖ Interface gr√°fica intuitiva
- ‚úÖ Inclui FFmpeg integrado

## Requisitos do sistema:
- Windows 7 ou superior
- Conex√£o com a internet

## Observa√ß√µes:
- O primeiro uso pode ser mais lento devido √† inicializa√ß√£o
- Alguns antiv√≠rus podem alertar sobre o execut√°vel (falso positivo)
- Mantenha o software atualizado para melhor compatibilidade
"""
        
        with open(release_dir / "README.txt", "w", encoding="utf-8") as f:
            f.write(readme_content)
        
        print(f"\nüì¶ Pasta de distribui√ß√£o criada: {release_dir.absolute()}")
        print("\n‚ú® Build conclu√≠do! Voc√™ pode distribuir a pasta 'release' completa.")
        
        return True
    else:
        print("‚ùå Erro: Execut√°vel n√£o foi criado")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéä Processo conclu√≠do com sucesso!")
        input("\nPressione Enter para sair...")
    else:
        print("\nüí• Processo falhou!")
        input("\nPressione Enter para sair...")
    sys.exit(0 if success else 1)