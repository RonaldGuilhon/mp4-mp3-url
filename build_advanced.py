#!/usr/bin/env python3
"""
Script avan√ßado para criar execut√°vel port√°vel do YouTube Downloader
Usa arquivo .spec personalizado para maior controle
"""

import os
import sys
import subprocess
import shutil
import time
from pathlib import Path

def print_banner():
    """Exibe banner do script"""
    print("="*60)
    print("    YouTube Downloader - Build Avan√ßado")
    print("    Criando execut√°vel port√°vel otimizado")
    print("="*60)
    print()

def check_requirements():
    """Verifica se todos os requisitos est√£o atendidos"""
    print("üîç Verificando requisitos...")
    
    # Verificar Python
    try:
        python_version = subprocess.check_output([sys.executable, "--version"], text=True).strip()
        print(f"  ‚úÖ {python_version}")
    except:
        print("  ‚ùå Python n√£o encontrado!")
        return False
    
    # Verificar arquivos essenciais
    required_files = ['main.py', 'YouTubeDownloader.spec']
    for file in required_files:
        if Path(file).exists():
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} n√£o encontrado!")
            return False
    
    # Verificar pasta bin
    bin_path = Path('bin')
    if bin_path.exists() and any(bin_path.iterdir()):
        print(f"  ‚úÖ Pasta bin com {len(list(bin_path.iterdir()))} arquivos")
    else:
        print("  ‚ö†Ô∏è  Pasta bin n√£o encontrada ou vazia")
    
    return True

def install_dependencies():
    """Instala depend√™ncias necess√°rias"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    # Instalar/atualizar pip
    subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], 
                  capture_output=True)
    
    # Instalar depend√™ncias do requirements.txt
    if Path('requirements.txt').exists():
        result = subprocess.run(
            [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
            capture_output=True, text=True
        )
        
        if result.returncode == 0:
            print("  ‚úÖ Depend√™ncias instaladas com sucesso")
            return True
        else:
            print(f"  ‚ùå Erro ao instalar depend√™ncias: {result.stderr}")
            return False
    else:
        # Instalar depend√™ncias manualmente (excluindo tkinter que √© built-in)
        packages = ['yt-dlp>=2023.7.6', 'pyinstaller>=5.13.0']
        for package in packages:
            result = subprocess.run(
                [sys.executable, "-m", "pip", "install", package],
                capture_output=True, text=True
            )
            if result.returncode == 0:
                print(f"  ‚úÖ {package}")
            else:
                print(f"  ‚ùå Erro ao instalar {package}")
                return False
        return True

def clean_build_dirs():
    """Limpa diret√≥rios de build anteriores"""
    print("\nüßπ Limpando builds anteriores...")
    
    dirs_to_clean = ['build', 'dist', '__pycache__']
    
    for dir_name in dirs_to_clean:
        dir_path = Path(dir_name)
        if dir_path.exists():
            try:
                shutil.rmtree(dir_path)
                print(f"  ‚úÖ {dir_name} removido")
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erro ao remover {dir_name}: {e}")
        else:
            print(f"  ‚ÑπÔ∏è  {dir_name} n√£o existe")

def build_executable():
    """Constr√≥i o execut√°vel usando o arquivo .spec"""
    print("\nüî® Construindo execut√°vel...")
    print("  Isso pode levar alguns minutos...")
    
    start_time = time.time()
    
    # Comando PyInstaller com arquivo .spec
    cmd = [sys.executable, "-m", "PyInstaller", "--clean", "YouTubeDownloader.spec"]
    
    print(f"  Executando: {' '.join(cmd)}")
    
    # Executar com output em tempo real
    process = subprocess.Popen(
        cmd, 
        stdout=subprocess.PIPE, 
        stderr=subprocess.STDOUT, 
        text=True, 
        universal_newlines=True
    )
    
    # Mostrar progresso
    for line in process.stdout:
        line = line.strip()
        if line:
            if "INFO:" in line:
                print(f"    {line.split('INFO:')[-1].strip()}")
            elif "WARNING:" in line:
                print(f"  ‚ö†Ô∏è  {line.split('WARNING:')[-1].strip()}")
            elif "ERROR:" in line:
                print(f"  ‚ùå {line.split('ERROR:')[-1].strip()}")
    
    process.wait()
    
    build_time = time.time() - start_time
    
    if process.returncode == 0:
        print(f"  ‚úÖ Build conclu√≠do em {build_time:.1f} segundos")
        return True
    else:
        print(f"  ‚ùå Build falhou ap√≥s {build_time:.1f} segundos")
        return False

def verify_executable():
    """Verifica se o execut√°vel foi criado corretamente"""
    print("\nüîç Verificando execut√°vel...")
    
    exe_path = Path('dist') / 'YouTubeDownloader.exe'
    
    if exe_path.exists():
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"  ‚úÖ Execut√°vel criado: {exe_path}")
        print(f"  üìä Tamanho: {size_mb:.1f} MB")
        
        # Teste r√°pido de execu√ß√£o (apenas verificar se inicia)
        print("  üß™ Testando execu√ß√£o...")
        try:
            # Tentar executar com timeout para verificar se n√£o trava
            test_process = subprocess.Popen(
                [str(exe_path)], 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE
            )
            time.sleep(2)  # Aguardar 2 segundos
            test_process.terminate()
            test_process.wait(timeout=5)
            print("  ‚úÖ Execut√°vel funciona corretamente")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Aviso no teste: {e}")
        
        return True
    else:
        print("  ‚ùå Execut√°vel n√£o encontrado!")
        return False

def create_release_package():
    """Cria pacote de distribui√ß√£o"""
    print("\nüì¶ Criando pacote de distribui√ß√£o...")
    
    release_dir = Path('release')
    
    # Limpar release anterior
    if release_dir.exists():
        shutil.rmtree(release_dir)
    
    release_dir.mkdir()
    
    # Copiar execut√°vel
    exe_source = Path('dist') / 'YouTubeDownloader.exe'
    exe_dest = release_dir / 'YouTubeDownloader.exe'
    
    shutil.copy2(exe_source, exe_dest)
    print(f"  ‚úÖ Execut√°vel copiado para {exe_dest}")
    
    # Criar documenta√ß√£o
    docs = {
        'README.txt': create_readme_content(),
        'CHANGELOG.txt': create_changelog_content(),
        'LICENSE.txt': create_license_content()
    }
    
    for filename, content in docs.items():
        doc_path = release_dir / filename
        with open(doc_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"  ‚úÖ {filename} criado")
    
    print(f"\nüìÅ Pacote de distribui√ß√£o criado em: {release_dir.absolute()}")
    return True

def create_readme_content():
    """Cria conte√∫do do README"""
    return """# YouTube Downloader - Execut√°vel Port√°vel

## üöÄ Como usar:

1. Execute YouTubeDownloader.exe
2. Cole a URL do YouTube no campo apropriado
3. Escolha o formato:
   - MP4: Para baixar v√≠deo completo
   - MP3: Para extrair apenas o √°udio
4. Selecione onde salvar os arquivos
5. Clique em "Verificar URL" para ver os itens
6. Selecione os itens desejados
7. Clique em "Baixar"

## ‚ú® Caracter√≠sticas:

- ‚úÖ Totalmente port√°vel (n√£o precisa instalar)
- ‚úÖ Suporte a v√≠deos individuais e playlists
- ‚úÖ Download em alta qualidade
- ‚úÖ Convers√£o autom√°tica para MP3
- ‚úÖ Interface gr√°fica intuitiva
- ‚úÖ FFmpeg integrado

## üíª Requisitos:

- Windows 7 ou superior
- Conex√£o com internet
- ~100MB de espa√ßo livre

## ‚ö†Ô∏è Observa√ß√µes:

- Primeiro uso pode ser mais lento
- Respeite os direitos autorais
- Use apenas para conte√∫do permitido

## üêõ Problemas?

- Verifique sua conex√£o com internet
- Tente uma URL diferente
- Reinicie o programa

Vers√£o: 1.0.0
Data: 2024
"""

def create_changelog_content():
    """Cria conte√∫do do changelog"""
    return """# Changelog - YouTube Downloader

## Vers√£o 1.0.0 (2024)

### ‚ú® Novidades:
- Interface gr√°fica completa
- Suporte a playlists do YouTube
- Download em MP4 e MP3
- Sele√ß√£o de itens individuais
- Barra de progresso
- Cancelamento de downloads
- FFmpeg integrado

### üîß Melhorias:
- Execut√°vel port√°vel
- Sem depend√™ncias externas
- Interface responsiva
- Tratamento de erros

### üêõ Corre√ß√µes:
- Estabilidade geral
- Compatibilidade com Windows
"""

def create_license_content():
    """Cria conte√∫do da licen√ßa"""
    return """MIT License

Copyright (c) 2024 YouTube Downloader

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

NOTE: This software uses yt-dlp and FFmpeg, which have their own licenses.
"""

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Verificar requisitos
    if not check_requirements():
        print("\n‚ùå Requisitos n√£o atendidos!")
        input("Pressione Enter para sair...")
        return False
    
    # Instalar depend√™ncias
    if not install_dependencies():
        print("\n‚ùå Falha ao instalar depend√™ncias!")
        input("Pressione Enter para sair...")
        return False
    
    # Limpar builds anteriores
    clean_build_dirs()
    
    # Construir execut√°vel
    if not build_executable():
        print("\n‚ùå Falha no build!")
        input("Pressione Enter para sair...")
        return False
    
    # Verificar execut√°vel
    if not verify_executable():
        print("\n‚ùå Execut√°vel inv√°lido!")
        input("Pressione Enter para sair...")
        return False
    
    # Criar pacote de distribui√ß√£o
    if not create_release_package():
        print("\n‚ùå Falha ao criar pacote!")
        input("Pressione Enter para sair...")
        return False
    
    # Sucesso!
    print("\n" + "="*60)
    print("üéâ BUILD CONCLU√çDO COM SUCESSO!")
    print("="*60)
    print("\nüì¶ Seu execut√°vel port√°vel est√° pronto!")
    print("üìÅ Localiza√ß√£o: release/YouTubeDownloader.exe")
    print("\n‚ú® Voc√™ pode distribuir toda a pasta 'release'")
    print("\nüöÄ Para testar, execute: release/YouTubeDownloader.exe")
    
    input("\nPressione Enter para sair...")
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Build cancelado pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• Erro inesperado: {e}")
        input("Pressione Enter para sair...")
        sys.exit(1)